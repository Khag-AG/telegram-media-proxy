import os
from telethon import TelegramClient, events
import aiohttp
import asyncio
from aiohttp import web
import json
import hashlib
from datetime import datetime

# ===== –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê =====
API_ID = 25851310
API_HASH = "6e623f9734f999d0ca50f8b9d81247ae"
BOT_TOKEN = "8100386629:AAGr3hwt9EoeGRRiubIJwIYOSJ1qLKtB9h8"
SOURCE_CHANNEL = "@testmytest138"
WEBHOOK_URL = "https://hook.us1.make.com/1u09zg5rt4p6e2bu8j44rk2niktvrjv1"  # –í–∞—à webhook

# –ü–æ—Ä—Ç –¥–ª—è API —Å–µ—Ä–≤–µ—Ä–∞
API_PORT = int(os.environ.get('PORT', 8080))

# ===== TELEGRAM –ö–õ–ò–ï–ù–¢ =====
client = TelegramClient('bot_session', API_ID, API_HASH)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
file_cache = {}

# ===== WEB API –î–õ–Ø MAKE.COM =====
app = web.Application()
routes = web.RouteTableDef()

@routes.get('/')
async def index(request):
    return web.json_response({
        'status': 'Bot API is running',
        'endpoints': {
            '/upload': 'POST - Upload file and get URL',
            '/process': 'POST - Process Telegram file_id'
        }
    })

@routes.post('/upload')
async def upload_file(request):
    """Endpoint –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏–∑ Make.com"""
    try:
        reader = await request.multipart()
        file_data = None
        caption = ""
        
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        async for field in reader:
            if field.name == 'file':
                file_data = await field.read()
                filename = field.filename or 'video.mp4'
            elif field.name == 'caption':
                caption = await field.text()
        
        if not file_data:
            return web.json_response({'error': 'No file provided'}, status=400)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥
        print(f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º {len(file_data)} –±–∞–π—Ç")
        
        async with aiohttp.ClientSession() as session:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º 0x0.st –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            data = aiohttp.FormData()
            data.add_field('file', file_data, filename=filename)
            
            response = await session.post('https://0x0.st', data=data)
            file_url = await response.text()
            file_url = file_url.strip()
            
            if not file_url.startswith('http'):
                # –ü—Ä–æ–±—É–µ–º file.io –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                data = {'file': (filename, file_data)}
                response = await session.post('https://file.io', data=data)
                result = await response.json()
                file_url = result.get('link', '')
        
        print(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {file_url}")
        
        return web.json_response({
            'success': True,
            'url': file_url,
            'caption': caption,
            'size': len(file_data)
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
        return web.json_response({'error': str(e)}, status=500)

@routes.post('/process')
async def process_telegram_file(request):
    """Endpoint –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ file_id –∏–∑ Telegram"""
    try:
        data = await request.json()
        file_id = data.get('file_id')
        message_id = data.get('message_id')
        chat_id = data.get('chat_id')
        
        if not all([file_id, message_id, chat_id]):
            return web.json_response({'error': 'Missing parameters'}, status=400)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cache_key = f"{chat_id}:{message_id}"
        if cache_key in file_cache:
            return web.json_response({
                'success': True,
                'url': file_cache[cache_key],
                'from_cache': True
            })
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ Telegram API
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return web.json_response({
            'success': False,
            'error': 'Direct Telegram download not implemented yet',
            'hint': 'Use /upload endpoint with file data'
        })
        
    except Exception as e:
        return web.json_response({'error': str(e)}, status=500)

# ===== TELEGRAM –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
@client.on(events.NewMessage(chats=[SOURCE_CHANNEL]))
async def handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞"""
    if event.media:
        print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –≤ –∫–∞–Ω–∞–ª–µ!")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_info = await get_file_info(event)
            
            # –ö–µ—à–∏—Ä—É–µ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            cache_key = f"{event.chat_id}:{event.id}"
            
            if file_info['size'] > 20 * 1024 * 1024:  # –ë–æ–ª—å—à–µ 20 –ú–ë
                print(f"–ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª ({file_info['size']} –±–∞–π—Ç), –∑–∞–≥—Ä—É–∂–∞–µ–º...")
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º
                file_bytes = await event.download_media(bytes)
                file_url = await upload_to_hosting(file_bytes, file_info['extension'])
                
                file_cache[cache_key] = file_url
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ webhook
                await send_to_webhook({
                    'type': 'large_file',
                    'url': file_url,
                    'caption': event.text or '',
                    'file_size': file_info['size'],
                    'message_id': event.id,
                    'chat_id': event.chat_id
                })
            else:
                # –ú–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
                await send_small_file(event, file_info)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")

async def get_file_info(event):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ"""
    file_extension = "bin"
    file_size = 0
    
    if hasattr(event.media, 'document'):
        file_size = event.media.document.size
        for attr in event.media.document.attributes:
            if hasattr(attr, 'file_name'):
                if '.' in attr.file_name:
                    file_extension = attr.file_name.split('.')[-1]
                break
    elif hasattr(event.media, 'video'):
        file_size = event.media.video.size if hasattr(event.media.video, 'size') else 0
        file_extension = "mp4"
    elif hasattr(event.media, 'photo'):
        file_extension = "jpg"
    
    return {
        'size': file_size,
        'extension': file_extension
    }

async def upload_to_hosting(file_bytes, extension):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥"""
    async with aiohttp.ClientSession() as session:
        data = aiohttp.FormData()
        data.add_field('file', file_bytes, filename=f'file.{extension}')
        
        response = await session.post('https://0x0.st', data=data)
        file_url = await response.text()
        return file_url.strip()

async def send_to_webhook(data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Make.com webhook"""
    if WEBHOOK_URL == "https://hook.eu1.make.com/your_webhook":
        print("‚ö†Ô∏è  Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return
    
    async with aiohttp.ClientSession() as session:
        await session.post(WEBHOOK_URL, json=data)
        print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Make.com!")

async def send_small_file(event, file_info):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é"""
    file_bytes = await event.download_media(bytes)
    
    async with aiohttp.ClientSession() as session:
        data = aiohttp.FormData()
        data.add_field('file', file_bytes, filename=f'file.{file_info["extension"]}')
        data.add_field('caption', event.text or '')
        data.add_field('type', 'direct_file')
        
        await session.post(WEBHOOK_URL, data=data)
        print("–ú–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Make.com!")

# ===== –ó–ê–ü–£–°–ö =====
async def start_telegram():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –∫–ª–∏–µ–Ω—Ç"""
    await client.start(bot_token=BOT_TOKEN)
    print("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print(f"üì° –°–ª–µ–∂—É –∑–∞ –∫–∞–Ω–∞–ª–æ–º: {SOURCE_CHANNEL}")

async def start_web_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä"""
    app.add_routes(routes)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', API_PORT)
    await site.start()
    print(f"üåê API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {API_PORT}")
    print(f"üìç Endpoints:")
    print(f"   - POST http://localhost:{API_PORT}/upload - –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤")
    print(f"   - POST http://localhost:{API_PORT}/process - –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ file_id")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ —Å–µ—Ä–≤–∏—Å–∞
    await asyncio.gather(
        start_telegram(),
        start_web_server()
    )
    
    # –†–∞–±–æ—Ç–∞–µ–º –ø–æ–∫–∞ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤—è—Ç
    await client.run_until_disconnected()

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã...")
    asyncio.run(main())